package com.example.resonant.managers

import android.content.Context
import android.media.audiofx.AudioEffect
import android.media.audiofx.Equalizer
import android.os.Handler
import android.os.Looper
import android.os.SystemClock
import android.util.Log
import androidx.annotation.OptIn
import androidx.media3.common.MediaItem
import androidx.media3.common.PlaybackException
import androidx.media3.common.PlaybackParameters
import androidx.media3.common.Player
import androidx.media3.common.util.UnstableApi
import androidx.media3.exoplayer.ExoPlayer
import com.example.resonant.playback.IntelligentEffectsState
import com.example.resonant.playback.MixStrategy
import com.example.resonant.playback.PlaybackStateRepository
import com.example.resonant.data.models.AudioAnalysis
import com.example.resonant.data.models.Song
import kotlin.math.abs
import kotlin.math.cos
import kotlin.math.max
import kotlin.math.min
import kotlin.math.pow
import kotlin.math.sqrt

class TransitionManager(
    private val context: Context,
    private val onTransitionComplete: (newPlayer: ExoPlayer, oldPlayer: ExoPlayer) -> Unit,
    private val onTransitionFailed: (oldPlayer: ExoPlayer) -> Unit,
    private val onTransitionProgress: ((position: Long, duration: Long) -> Unit)? = null
) {

    companion object {
        private const val BEATMATCH_BPM_TOLERANCE = 0.06
        private const val ANIMATION_FRAME_DELAY_MS = 16L
        private const val EQ_MAX_ATTENUATION: Short = -1500
        private const val EQ_MEDIUM_ATTENUATION: Short = -800
        private const val EQ_LIGHT_ATTENUATION: Short = -400
    }

    @Volatile
    var isTransitioning: Boolean = false
        private set
    private var nextPlayer: ExoPlayer? = null
    private var oldPlayerEq: Equalizer? = null
    private var newPlayerEq: Equalizer? = null

    @Volatile
    var transitionProgress: Float = 0f
        private set
    private var currentPlayer: ExoPlayer? = null // El 'oldPlayer'
    private var currentSong: Song? = null

    private fun handleMixCompletion(newPlayer: ExoPlayer, oldPlayer: ExoPlayer, nextSong: Song) {
        if (!isTransitioning) {
            Handler(Looper.getMainLooper()).post { newPlayer.release() }
            return
        }

        isTransitioning = false
        this.nextPlayer = null

        // Limpieza de EQs
        oldPlayerEq?.release()
        newPlayerEq?.release()
        oldPlayerEq = null
        newPlayerEq = null

        this.currentPlayer = null // üî•
        this.currentSong = null   // üî•
        transitionProgress = 0f // üî•

        // Restaurar par√°metros del nuevo reproductor
        try {
            if (abs(newPlayer.playbackParameters.speed - 1.0f) > 0.01f) {
                newPlayer.setPlaybackParameters(PlaybackParameters(1.0f))
            }
            newPlayer.volume = 1.0f
        } catch (e: Exception) { Log.e("TransitionManager", "Error restaurando par√°metros", e) }

        // Notifica al servicio que la transici√≥n ha terminado
        onTransitionComplete(newPlayer, oldPlayer)

        Log.d("TransitionManager", "üéâ Transici√≥n COMPLETADA: ${nextSong.title}")
    }

    private fun handleMixFailure(oldPlayer: ExoPlayer, newPlayer: ExoPlayer?) {
        Log.e("TransitionManager", "‚ùå Fallo cr√≠tico en transici√≥n, recuperando estado...")
        newPlayer?.release()
        isTransitioning = false
        nextPlayer = null
        transitionProgress = 0f // üî•
        this.currentPlayer = null // üî•
        this.currentSong = null   // üî•
        onTransitionFailed(oldPlayer)
    }

    fun startTransition(oldPlayer: ExoPlayer,
                        oldSong: Song,
                        nextSong: Song,
                        nextSongIndex: Int,
                        crossfadeMode: CrossfadeMode,
                        isAlbumMode: Boolean,
                        automixEnabled: Boolean,
                        crossfadeDurationMs: Long
    ) {
        Log.d("TransitionManager", "üéØ transitionToNextSong INICIADA - nextSong: ${nextSong.title}")

        // ‚úÖ L√ìGICA CORREGIDA: Verificar si debe hacer transici√≥n
        val shouldTransition = when {
            crossfadeMode == CrossfadeMode.INTELLIGENT_EQ -> {
                // El modo inteligente SIEMPRE hace transici√≥n (dura 0ms pero usa el motor inteligente)
                Log.d("TransitionManager", "üß† Modo Inteligente - Usando motor de transiciones inteligentes")
                true
            }
            isAlbumMode -> {
                // En modo √°lbum, depende de automixEnabled
                val should = automixEnabled
                Log.d("TransitionManager", "üìÄ Modo √Ålbum - Automix: $automixEnabled -> Transici√≥n: $should")
                should
            }
            else -> {
                // En modos normales, depende de la duraci√≥n
                val should = crossfadeDurationMs > 0
                Log.d("TransitionManager", "üéµ Modo Normal - Duraci√≥n: ${crossfadeDurationMs}ms -> Transici√≥n: $should")
                should
            }
        }
        if (!shouldTransition) {
            Log.d("TransitionManager", "‚ùå Transici√≥n desactivada. Saltando directamente.")
            onTransitionFailed(oldPlayer)
            return
        }

        synchronized(this) {
            if (isTransitioning) {
                Log.w("TransitionManager", "Ignorando trigger, ya hay una transici√≥n en curso.")
                return
            }
            isTransitioning = true
            transitionProgress = 0f // üî• A√ëADE ESTA L√çNEA
            this.currentPlayer = oldPlayer // üî• A√ëADE ESTA L√çNEA
            this.currentSong = oldSong   // üî• A√ëADE ESTA L√çNEA
        }

        val onComplete: (newPlayer: ExoPlayer) -> Unit = { newPlayer ->
            handleMixCompletion(newPlayer, oldPlayer, nextSong)
        }

        // ‚úÖ L√ìGICA DE SELECCI√ìN DE TRANSICI√ìN MEJORADA
        if (isAlbumMode) {
            performBasicAlbumMix(oldPlayer, oldSong, nextSong, nextSongIndex, onComplete)
        } else {
            when (crossfadeMode) {
                CrossfadeMode.INTELLIGENT_EQ -> {
                    // üî• CLAVE: El modo inteligente usa su propia duraci√≥n calculada, NO crossfadeDurationMs
                    performFullyIntelligentMix(oldPlayer, oldSong, nextSong, nextSongIndex, onComplete)
                }
                else -> {
                    // Modos normales usan la duraci√≥n del slider
                    performSimpleCrossfade(oldPlayer, oldSong, nextSong, nextSongIndex, onComplete, crossfadeMode, crossfadeDurationMs)
                }
            }
        }
    }

    fun cancelCurrentTransition() {
        if (!isTransitioning) return
        Log.w("TransitionManager", "üõë CANCELANDO TRANSICI√ìN EN CURSO...")
        isTransitioning = false
        transitionProgress = 0f // üî•

        try { nextPlayer?.stop(); nextPlayer?.release() } catch (e: Exception) { Log.e("TransitionManager", "Error al liberar nextExoPlayer", e) }
        nextPlayer = null
        try { oldPlayerEq?.release(); newPlayerEq?.release() } catch (e: Exception) { Log.e("TransitionManager", "Error al liberar EQs", e) }
        oldPlayerEq = null
        newPlayerEq = null

        this.currentPlayer = null // üî•
        this.currentSong = null   // üî•
        Log.d("TransitionManager", "‚úÖ Transici√≥n cancelada.")
    }

    fun forceCompleteTransition() {
        Log.w("TransitionManager", "üöÄ FORZANDO COMPLETADO DE TRANSICI√ìN...")
        if (!isTransitioning || this.nextPlayer == null || this.currentPlayer == null || this.currentSong == null) {
            Log.e("TransitionManager", "No se puede forzar, estado inv√°lido.")
            if (isTransitioning) {
                cancelCurrentTransition()
            }
            return
        }
        handleMixCompletion(this.nextPlayer!!, this.currentPlayer!!, this.currentSong!!)
    }

    fun preloadNextSong(nextSong: Song?) {
        // Si ya hay un reproductor precargado, lo liberamos antes de crear uno nuevo.
        nextPlayer?.release()
        nextPlayer = null

        if (nextSong == null) {
            Log.d("TransitionManager", "No hay siguiente canci√≥n para precargar.")
            return
        }

        Log.i("TransitionManager", "‚ö°Ô∏è PRE-CARGANDO siguiente canci√≥n: ${nextSong.title}")

        try {
            val newPlayer = ExoPlayer.Builder(context).build()
            val mediaItem = MediaItem.fromUri(nextSong.url ?: "")

            // NO le damos la cola completa, solo la canci√≥n que necesita para prepararse.
            newPlayer.setMediaItem(mediaItem)
            newPlayer.volume = 0f // Lo dejamos en silencio
            newPlayer.prepare() // Iniciamos la preparaci√≥n en segundo plano

            // Guardamos la referencia para usarla m√°s tarde.
            this.nextPlayer = newPlayer
        } catch (e: Exception) {
            Log.e("TransitionManager", "Error durante la pre-carga de ${nextSong.title}", e)
            nextPlayer?.release()
            nextPlayer = null
        }
    }

    // =================================================================================================
    // ===                                  AUTOMIX B√ÅSICO (PARA √ÅLBUMES)                            ===
    // =================================================================================================

    private fun performBasicAlbumMix(
        oldPlayer: ExoPlayer, oldSong: Song, newSong: Song,
        nextSongIndex: Int,
        onMixComplete: (newPlayer: ExoPlayer) -> Unit
    ) {
        Log.i("ResonantAutomix", "ü§ñ Iniciando Automix de √Ålbum (usando pre-carga)...")

        // 1. OBTENEMOS EL REPRODUCTOR YA PREPARADO
        val newPlayer = this.nextPlayer

        // 2. COMPROBACI√ìN DE SEGURIDAD: ¬øY si no se pudo pre-cargar?
        if (newPlayer == null) {
            Log.e("ResonantAutomix", "ERROR FATAL: El reproductor para '${newSong.title}' no fue pre-cargado. Saltando.")
            // Si falla, notificamos al servicio que simplemente salte a la siguiente canci√≥n
            // sin una transici√≥n suave para evitar un error mayor.
            onTransitionFailed(oldPlayer)
            return
        }

        // 3. COMO EL REPRODUCTOR YA EST√Å LISTO, LA L√ìGICA ES INMEDIATA.
        try {
            // Le damos la cola completa AHORA, justo antes de empezar.
            val queue = PlaybackStateRepository.activeQueue!!
            val mediaItems = queue.songs.map { MediaItem.fromUri(it.url ?: "") }
            newPlayer.setMediaItems(mediaItems, nextSongIndex, 0L)

            newPlayer.volume = 1.0f
            newPlayer.play()
            onMixComplete(newPlayer)

            // IMPORTANTE: Reseteamos la referencia para que no se reutilice por error.
            this.nextPlayer = null

        } catch (e: Exception) {
            Log.e("ResonantAutomix", "Error ejecutando el corte con el reproductor pre-cargado.", e)
            handleMixFailure(oldPlayer, newPlayer)
        }
    }

    // =================================================================================================
    // ===                                  MOTOR DE CROSSFADE SIMPLE                              ===
    // =================================================================================================

    private fun performSimpleCrossfade(
        oldPlayer: ExoPlayer, oldSong: Song, newSong: Song,
        nextSongIndex: Int,
        onMixComplete: (newPlayer: ExoPlayer) -> Unit,
        crossfadeMode: CrossfadeMode,
        crossfadeDurationMs: Long
    ) {
        Log.i("Crossfade", "üîÑ Iniciando Crossfade Simple. √çndice siguiente: $nextSongIndex")
        val newPlayer = ExoPlayer.Builder(context).build()
        this.nextPlayer = newPlayer

        try {
            val queue = PlaybackStateRepository.activeQueue

            if (queue == null || queue.songs.isEmpty()) {
                Log.e("Crossfade", "Error: No se encontr√≥ una cola activa para la transici√≥n.")
                handleMixFailure(oldPlayer, newPlayer)
                return
            }

            val mediaItems = queue.songs.map { MediaItem.fromUri(it.url ?: "") }

            val startPositionMs = newSong.audioAnalysis?.audioStartMs?.toLong() ?: 0L
            newPlayer.setMediaItems(mediaItems, nextSongIndex, startPositionMs)

            newPlayer.addListener(object : Player.Listener {
                override fun onPlaybackStateChanged(playbackState: Int) {
                    if (playbackState == Player.STATE_READY) {
                        newPlayer.removeListener(this)
                        Log.d("Crossfade", "üéµ NewPlayer listo con la cola completa. Iniciando crossfade.")

                        try {
                            newPlayer.volume = 0.0f
                            newPlayer.play()
                            animateSimpleCrossfade(oldPlayer, newPlayer, oldSong, newSong, onMixComplete, crossfadeMode, crossfadeDurationMs)
                        } catch (e: Exception) {
                            Log.e("Crossfade", "Error al iniciar newPlayer listo.", e)
                            handleMixFailure(oldPlayer, newPlayer)
                        }
                    }
                }
                override fun onPlayerError(error: PlaybackException) {
                    newPlayer.removeListener(this)
                    Log.e("Crossfade", "Error en newPlayer durante la preparaci√≥n.", error)
                    handleMixFailure(oldPlayer, newPlayer)
                }
            })

            newPlayer.prepare()

        } catch (e: Exception) {
            Log.e("MusicService", "Error cr√≠tico preparando newPlayer para crossfade.", e)
            handleMixFailure(oldPlayer, newPlayer)
        }
    }

    private fun animateSimpleCrossfade(
        oldPlayer: ExoPlayer,
        newPlayer: ExoPlayer,
        oldSong: Song,
        newSong: Song,
        onMixComplete: (newPlayer: ExoPlayer) -> Unit,
        crossfadeMode: CrossfadeMode,
        duration: Long) {
        val gainAdjustment = calculateLoudnessGain(oldSong.audioAnalysis, newSong.audioAnalysis)

        val handler = Handler(Looper.getMainLooper())
        val startTime = SystemClock.uptimeMillis()

        val animationRunnable = object : Runnable {
            override fun run() {
                if (!isTransitioning) {
                    Log.w("Crossfade", "üõë Animaci√≥n simple detenida porque la transici√≥n fue cancelada.")
                    handler.removeCallbacks(this)
                    return
                }

                val elapsed = SystemClock.uptimeMillis() - startTime
                val progress = (elapsed.toFloat() / duration).coerceIn(0f, 1f)
                transitionProgress = progress // üî• A√ëADE ESTA L√çNEA

                val (oldVol, newVol) = when (crossfadeMode) {
                    CrossfadeMode.SOFT_MIX -> Pair(sqrt(1 - progress), sqrt(progress))
                    CrossfadeMode.DIRECT_CUT -> {
                        val smooth = 0.5f * (1 - cos(progress * Math.PI.toFloat()))
                        Pair(1 - smooth, smooth)
                    }
                    else -> Pair(sqrt(1 - progress), sqrt(progress)) // Fallback
                }

                try {
                    oldPlayer.volume = oldVol
                    newPlayer.volume = newVol * gainAdjustment

                    if (elapsed % 500 < ANIMATION_FRAME_DELAY_MS) {
                        val position = newPlayer.currentPosition
                        val newDuration = newPlayer.duration
                        if (newDuration > 0) {
                            // Llama al callback si alguien nos lo proporcion√≥
                            onTransitionProgress?.invoke(position, newDuration)
                        }
                    }

                } catch (e: Exception) {
                    Log.e("Crossfade", "‚ùå Error durante la animaci√≥n simple. Deteniendo bucle.", e)
                    handler.removeCallbacks(this)
                    handleMixFailure(oldPlayer, newPlayer)
                    return
                }

                if (progress < 1f) {
                    handler.postDelayed(this,
                        ANIMATION_FRAME_DELAY_MS
                    )
                } else {
                    Log.i("Crossfade", "‚úÖ Animaci√≥n completada.")
                    // SIN oldPlayer.stop(), SIN liberar EQs, SIN restaurar volumen.
                    onMixComplete(newPlayer)
                }
            }
        }
        handler.post(animationRunnable)
    }

    // =================================================================================================
    // ===                           CROSSFADE INTELIGENTE (MOTOR DE DJ)                             ===
    // =================================================================================================

    private fun performFullyIntelligentMix(oldPlayer: ExoPlayer, oldSong: Song, newSong: Song, nextSongIndex: Int, onMixComplete: (newPlayer: ExoPlayer) -> Unit) {
        val strategy = calculateAutomixStrategy(oldSong, newSong)
        val mixDuration = calculateFullyIntelligentDuration(oldSong, newSong, strategy)
        val optimalOutPoint = findOptimalOutPoint(oldSong.audioAnalysis)
        val optimalInPoint = findOptimalInPoint(newSong.audioAnalysis)

        Log.i("IntelligentCrossfade", "üß† MEZCLA INTELIGENTE COMPLETA - IGNORANDO DURACI√ìN DEL SLIDER")
        Log.i("IntelligentCrossfade", "üéØ Estrategia: ${strategy.name}")
        Log.i("IntelligentCrossfade", "‚è±Ô∏è Duraci√≥n calculada: ${mixDuration}ms")
        Log.i("IntelligentCrossfade", "üìç √çndice Siguiente: $nextSongIndex")

        prepareAndExecuteFullyIntelligentMix(
            oldPlayer, oldSong, newSong,
            nextSongIndex, // <-- P√ÅSALE EL √çNDICE
            mixDuration, strategy,
            optimalOutPoint, optimalInPoint,
            onMixComplete
        )
    }

    private fun prepareAndExecuteFullyIntelligentMix(
        oldPlayer: ExoPlayer,
        oldSong: Song,
        newSong: Song,
        nextSongIndex: Int,
        durationMs: Long,
        strategy: MixStrategy,
        optimalOutPoint: Int,
        optimalInPoint: Int,
        onMixComplete: (newPlayer: ExoPlayer) -> Unit
    ) {
        Log.i("IntelligentCrossfade", "üöÄ Preparando mezcla inteligente. √çndice Siguiente: $nextSongIndex")
        Log.i("IntelligentCrossfade", "üìç Puntos: Salida=${optimalOutPoint}ms, Entrada=${optimalInPoint}ms")

        val newPlayer = ExoPlayer.Builder(context).build()
        this.nextPlayer = newPlayer

        try {

            val queue = PlaybackStateRepository.activeQueue
            if (queue == null || queue.songs.isEmpty()) {
                Log.e("IntelligentCrossfade", "Error: No se encontr√≥ una cola activa para la transici√≥n.")
                handleMixFailure(oldPlayer, newPlayer)
                return
            }

            val mediaItems = queue.songs.map { MediaItem.fromUri(it.url ?: "") }

            newPlayer.setMediaItems(mediaItems, nextSongIndex, optimalInPoint.toLong())

            newPlayer.addListener(object : Player.Listener {
                override fun onPlaybackStateChanged(playbackState: Int) {
                    if (playbackState == Player.STATE_READY) {
                        newPlayer.removeListener(this)
                        Log.d("IntelligentCrossfade", "‚úÖ NewPlayer listo con la cola completa. Iniciando mezcla.")

                        try {
                            if (strategy == MixStrategy.BEATMATCH_MIX) {
                                oldSong.audioAnalysis?.let { oldA ->
                                    newSong.audioAnalysis?.let { newA ->
                                        syncTempo(oldPlayer, oldA, newA, newPlayer)
                                    }
                                }
                            }

                            newPlayer.volume = 0f
                            newPlayer.play()

                            Log.d("IntelligentCrossfade", "üéµ NewPlayer iniciado en la posici√≥n correcta.")

                            // 7. INICIAR ANIMACI√ìN (se mantiene igual)
                            animateFullyIntelligentMix(
                                oldPlayer, newPlayer, oldSong, newSong,
                                durationMs, strategy,
                                optimalOutPoint, optimalInPoint,
                                onMixComplete
                            )
                        } catch (e: Exception) {
                            Log.e("IntelligentCrossfade", "Error al iniciar newPlayer listo.", e)
                            handleMixFailure(oldPlayer, newPlayer)
                        }
                    }
                }
                override fun onPlayerError(error: PlaybackException) {
                    newPlayer.removeListener(this)
                    Log.e("IntelligentCrossfade", "Error en newPlayer durante preparaci√≥n.", error)
                    handleMixFailure(oldPlayer, newPlayer)
                }
            })

            newPlayer.prepare()

        } catch (e: Exception) {
            Log.e("IntelligentCrossfade", "‚ùå Error cr√≠tico al preparar mezcla inteligente", e)
            handleMixFailure(oldPlayer, newPlayer)
        }
    }

    private fun animateFullyIntelligentMix(
        oldPlayer: ExoPlayer,
        newPlayer: ExoPlayer,
        oldSong: Song,
        newSong: Song,
        durationMs: Long,
        strategy: MixStrategy,
        optimalOutPoint: Int,
        optimalInPoint: Int,
        onMixComplete: (newPlayer: ExoPlayer) -> Unit
    ) {
        Log.i("Crossfade", "üé¨ ANIMACI√ìN INICIADA - Duraci√≥n: ${durationMs}ms, Estrategia: ${strategy.name}")

        initializeIntelligentEQ(oldPlayer, newPlayer)
        val gainAdjustment = calculateLoudnessGain(oldSong.audioAnalysis, newSong.audioAnalysis)
        val handler = Handler(Looper.getMainLooper())
        val startTime = SystemClock.uptimeMillis()
        var effectsState = IntelligentEffectsState()

        val animationRunnable = object : Runnable {
            override fun run() {
                if (!isTransitioning) {
                    Log.w("Crossfade", "üõë Animaci√≥n detenida porque la transici√≥n fue cancelada.")
                    handler.removeCallbacks(this)
                    return
                }

                val elapsed = SystemClock.uptimeMillis() - startTime
                val progress = (elapsed.toFloat() / durationMs).coerceIn(0f, 1f)
                transitionProgress = progress // üî• A√ëADE ESTA L√çNEA

                // ‚úÖ LOG DE PROGRESO CADA 500ms
                if (elapsed % 500 < 20) {
                    Log.d("Crossfade", "üìä Progreso: ${(progress * 100).toInt()}% (${elapsed}ms/${durationMs}ms)")
                }

                try {
                    if (!verifyPlayersState(oldPlayer, newPlayer)) {
                        Log.e("Crossfade", "‚ùå Estado de players inv√°lido")
                        handler.removeCallbacks(this)
                        handleMixFailure(oldPlayer, newPlayer)
                        return
                    }

                    val (oldVol, newVol) = getEnhancedIntelligentVolumeCurve(progress, strategy)
                    applyVolumeSmoothly(oldPlayer, newPlayer, oldVol, newVol, gainAdjustment)
                    applyEnhancedIntelligentEq(oldPlayerEq, newPlayerEq, progress, strategy, oldSong, newSong)
                    applyIntelligentEffects(progress, strategy, effectsState)

                    if (elapsed % 500 < ANIMATION_FRAME_DELAY_MS) {
                        val position = newPlayer.currentPosition
                        val newDuration = newPlayer.duration
                        if (newDuration > 0) {
                            // Llama al callback si alguien nos lo proporcion√≥
                            onTransitionProgress?.invoke(position, newDuration)
                        }
                    }

                } catch (e: Exception) {
                    Log.e("Crossfade", "‚ùå Error durante la animaci√≥n inteligente", e)
                    handler.removeCallbacks(this)
                    handleMixFailure(oldPlayer, newPlayer)
                    return
                }

                if (progress < 1f) {
                    handler.postDelayed(this,
                        ANIMATION_FRAME_DELAY_MS
                    )
                } else {
                    Log.i("Crossfade", "‚úÖ ANIMACI√ìN COMPLETADA - Llamando onMixComplete")
                    onMixComplete(newPlayer)
                }
            }
        }
        handler.post(animationRunnable)
    }

    private fun applyIntelligentEffects(progress: Float, strategy: MixStrategy, effectsState: IntelligentEffectsState) {
        when (strategy) {
            MixStrategy.BEATMATCH_MIX -> applyBeatmatchEffects(progress, effectsState)
            MixStrategy.HARMONIC_BLEND -> applyHarmonicEffects(progress, effectsState)
            MixStrategy.RHYTHMIC_FADE -> applyRhythmicEffects(progress, effectsState)
            MixStrategy.STEM_SWAP_MIX -> {
                if (progress >= 0.5f && !effectsState.bassSwapped) {
                    Log.i("IntelligentCrossfade", "üëë STEM SWAP - Fase de Bass Swap completada")
                    effectsState.bassSwapped = true
                }
            }
            else -> applyStandardEffects(progress, effectsState)
        }
    }

    @OptIn(UnstableApi::class)
    private fun initializeIntelligentEQ(oldPlayer: ExoPlayer, newPlayer: ExoPlayer) {
        try {
            oldPlayer.audioSessionId.takeIf { it != 0 }?.let { sessionId ->
                oldPlayerEq = Equalizer(0, sessionId).apply {
                    enabled = true // ‚úÖ ¬°CORRECTO!
                    for (i in 0 until numberOfBands) {
                        setBandLevel(i.toShort(), 0)
                    }
                    Log.d("IntelligentCrossfade", "‚úÖ OldPlayer EQ (ExoPlayer) inicializado en sesi√≥n $sessionId - Bandas: $numberOfBands")
                }
            } ?: Log.w("IntelligentCrossfade", "OldPlayer audio session ID no estaba lista para el EQ.")

            // Hacemos lo mismo para el nuevo reproductor.
            newPlayer.audioSessionId.takeIf { it != 0 }?.let { sessionId ->
                newPlayerEq = Equalizer(0, sessionId).apply {
                    enabled = true
                    for (i in 0 until numberOfBands) {
                        setBandLevel(i.toShort(), 0)
                    }
                    Log.d("IntelligentCrossfade", "‚úÖ NewPlayer EQ (ExoPlayer) inicializado en sesi√≥n $sessionId - Bandas: $numberOfBands")
                }
            } ?: Log.w("IntelligentCrossfade", "NewPlayer audio session ID no estaba lista para el EQ.")

        } catch (e: Exception) {
            // [MANTENIDO] El bloque catch es perfecto para manejar dispositivos sin soporte de EQ.
            Log.e("IntelligentCrossfade", "‚ö†Ô∏è El dispositivo no soporta Equalizer o la sesi√≥n de audio no est√° lista.", e)
            oldPlayerEq = null
            newPlayerEq = null
        }
    }

    private fun applyBeatmatchEffects(progress: Float, effectsState: IntelligentEffectsState) {
        // ‚úÖ BASS SWAP MEJORADO
        if (progress >= 0.5f && !effectsState.bassSwapped) {
            Log.i("IntelligentCrossfade", "üéõÔ∏è BASS SWAP INTELIGENTE ACTIVADO!")
            effectsState.bassSwapped = true

            // Efecto adicional: peque√±o ajuste de EQ para enfatizar el swap
            newPlayerEq?.let { eq ->
                val bands = shortArrayOf(0, 1)
                bands.forEach { band ->
                    val currentLevel = eq.getBandLevel(band)
                    val boostedLevel = (currentLevel * 1.2f).toInt().toShort().coerceAtMost(
                        EQ_MAX_ATTENUATION
                    )
                    eq.setBandLevel(band, boostedLevel)
                }
            }
        }

        // ‚úÖ EFECTO DE GROOVE SYNC
        if (progress >= 0.7f && !effectsState.rhythmicSync) {
            Log.i("IntelligentCrossfade", "ü•Å GROOVE SYNC ACTIVADO!")
            effectsState.rhythmicSync = true
        }
    }

    private fun applyHarmonicEffects(progress: Float, effectsState: IntelligentEffectsState) {
        // ‚úÖ TRANSICI√ìN ARM√ìNICA PROGRESIVA
        if (progress >= 0.3f && !effectsState.harmonicTransition) {
            Log.i("IntelligentCrossfade", "üéµ TRANSICI√ìN ARM√ìNICA INICIADA")
            effectsState.harmonicTransition = true
        }

        // ‚úÖ EFECTO DE RESONANCIA ARM√ìNICA
        if (progress >= 0.6f && !effectsState.rhythmicSync) {
            Log.i("IntelligentCrossfade", "üåà RESONANCIA ARM√ìNICA ACTIVADA")
            effectsState.rhythmicSync = true
        }
    }

    private fun applyRhythmicEffects(progress: Float, effectsState: IntelligentEffectsState) {
        // ‚úÖ SINCRONIZACI√ìN R√çTMICA
        if (progress >= 0.4f && !effectsState.rhythmicSync) {
            Log.i("IntelligentCrossfade", "üéØ SINCRONIZACI√ìN R√çTMICA ACTIVADA")
            effectsState.rhythmicSync = true
        }
    }

    private fun getEnhancedIntelligentVolumeCurve(progress: Float, strategy: MixStrategy): Pair<Float, Float> {
        val p = progress.coerceIn(0f, 1f)

        return when (strategy) {
            MixStrategy.STEM_SWAP_MIX -> getStemSwapVolumeCurve(p)
            MixStrategy.BEATMATCH_MIX -> {
                // ‚úÖ CURVA BEATMATCH MEJORADA - PRECISA PERO SUAVE
                val oldVol = when {
                    p < 0.3f -> 1f - (p / 0.3f).pow(1.8f) * 0.2f  // Bajada muy suave inicial
                    p < 0.7f -> 0.8f - ((p - 0.3f) / 0.4f).pow(1.2f) * 0.5f  // Bajada controlada
                    else -> 0.3f - ((p - 0.7f) / 0.3f).pow(0.8f) * 0.3f  // Bajada final suave
                }

                val newVol = when {
                    p < 0.2f -> (p / 0.2f).pow(2.2f) * 0.3f  // Entrada muy suave
                    p < 0.6f -> 0.3f + ((p - 0.2f) / 0.4f).pow(1.1f) * 0.5f  // Subida progresiva
                    else -> 0.8f + ((p - 0.6f) / 0.4f).pow(0.9f) * 0.2f  // Subida final
                }

                Pair(oldVol.coerceIn(0f, 1f), newVol.coerceIn(0f, 1f))
            }

            MixStrategy.HARMONIC_BLEND -> {
                // Curva de "potencia constante" (Equal Power Crossfade) para la m√°xima suavidad.
                // Garantiza que la energ√≠a total percibida se mantiene constante durante la mezcla.
                val smoothP = 0.5f * (1 - cos(p * Math.PI.toFloat())) // Curva sinusoidal para m√°s suavidad
                val oldVol = sqrt(1.0f - smoothP)
                val newVol = sqrt(smoothP)
                Pair(oldVol, newVol)
            }

            MixStrategy.RHYTHMIC_FADE -> {
                // ‚úÖ CURVA DE VOLUMEN MEJORADA PARA UNA MEZCLA M√ÅS LARGA
                // La canci√≥n que se va se mantiene casi al m√°ximo volumen durante la primera
                // mitad de la mezcla y luego cae bruscamente al final.
                val oldVol = 1f - p.pow(3f)

                // La canci√≥n que entra sube de forma m√°s constante desde el principio,
                // asegurando que ambas conviven a buen volumen.
                val newVol = p.pow(0.6f)

                Pair(oldVol.coerceIn(0f, 1f), newVol.coerceIn(0f, 1f))
            }

            else -> {
                // ‚úÖ CURVA EST√ÅNDAR MEJORADA
                val oldVol = (1 - p).pow(1.4f)
                val newVol = p.pow(0.9f)
                Pair(oldVol, newVol)
            }
        }
    }

    private fun applyStandardEffects(progress: Float, effectsState: IntelligentEffectsState) {
        // ‚úÖ EFECTOS EST√ÅNDAR MINIMALISTAS
        if (progress >= 0.8f && !effectsState.finalFadeStarted) {
            Log.i("IntelligentCrossfade", "üîö FASE FINAL DE TRANSICI√ìN")
            effectsState.finalFadeStarted = true
        }
    }

    private fun applyEnhancedIntelligentEq(oldEq: Equalizer?, newEq: Equalizer?, progress: Float, strategy: MixStrategy, oldSong: Song?, newSong: Song?) {
        if (oldEq == null || newEq == null) return

        val bands = shortArrayOf(0, 1, 2, 3, 4)

        // ‚úÖ CORRECCI√ìN: Estrategias con l√≥gica de EQ por fases (Stem Swap, Rhythmic Fade)
        // deben ejecutarse desde el principio (progress 0.0) y usar el 'progress' principal,
        // no el 'musicalCurve' derivado.

        if (strategy == MixStrategy.STEM_SWAP_MIX) {
            applyStemSwapEq(oldEq, newEq, progress, bands)
            return // Salir
        }

        // üî• ESTA ES LA L√çNEA CLAVE A√ëADIDA
        if (strategy == MixStrategy.RHYTHMIC_FADE) {
            applyEnhancedRhythmicEq(oldEq, newEq, progress, bands, oldSong, newSong)
            return // Salir
        }

        // --- L√≥gica de EQ est√°ndar (para BEATMATCH, HARMONIC, STANDARD) ---

        // ‚úÖ INICIO DIN√ÅMICO BASADO EN ESTRATEGIA Y PROGRESO
        val eqStartPoint = calculateDynamicEqStartPoint(strategy, progress)

        if (progress < eqStartPoint) {
            // ‚úÖ ¬°AQU√ç EST√Å LA CORRECCI√ìN!
            // La canci√≥n antigua se mantiene plana.
            resetEqToFlat(oldEq, bands)
            // La canci√≥n nueva se mantiene CORTADA (en -1500) hasta que le toque entrar.
            resetEqToCut(newEq, bands)
            return
        }

        // ‚úÖ CURVA MEJORADA CON CRITERIOS MUSICALES
        val eqProgress = ((progress - eqStartPoint) / (1 - eqStartPoint)).coerceIn(0f, 1f)
        val musicalCurve = calculateMusicalCurve(eqProgress, strategy, oldSong, newSong)

        // ‚úÖ APLICAR ESTRATEGIA ESPEC√çFICA CON CURVA MUSICAL
        when (strategy) {
            MixStrategy.BEATMATCH_MIX -> applyEnhancedBeatmatchEq(oldEq, newEq, musicalCurve, bands, oldSong, newSong)
            MixStrategy.HARMONIC_BLEND -> applyEnhancedHarmonicEq(oldEq, newEq, musicalCurve, bands, oldSong, newSong)
            // RHYTHMIC_FADE y STEM_SWAP ya se han manejado arriba
            else -> applyEnhancedStandardEq(oldEq, newEq, musicalCurve, bands)
        }

        Log.d("ProfessionalEQ", "üéöÔ∏è ${strategy.name} - Musical Curve: ${"%.2f".format(musicalCurve)}")
    }

    private fun applyEnhancedBeatmatchEq(oldEq: Equalizer, newEq: Equalizer, progress: Float, bands: ShortArray, oldSong: Song?, newSong: Song?, maxAttenuation: Short = EQ_MEDIUM_ATTENUATION) {
        // Calcula el progreso para cada rango de frecuencia
        val bassProgress = (progress / 0.5f).coerceIn(0f, 1f)
        val midProgress = ((progress - 0.3f) / 0.5f).coerceIn(0f, 1f)
        val highProgress = ((progress - 0.6f) / 0.4f).coerceIn(0f, 1f)

        // Aplica el EQ a cada banda individualmente
        // BASS (Banda 0)
        oldEq.setBandLevel(bands[0], (maxAttenuation * bassProgress).toInt().toShort())
        newEq.setBandLevel(bands[0], (maxAttenuation * (1 - bassProgress)).toInt().toShort())

        // MIDS (Bandas 1, 2, 3)
        for (i in 1..3) {
            oldEq.setBandLevel(bands[i], (maxAttenuation * midProgress).toInt().toShort())
            newEq.setBandLevel(bands[i], (maxAttenuation * (1 - midProgress)).toInt().toShort())
        }

        // HIGHS (Banda 4)
        oldEq.setBandLevel(bands[4], (maxAttenuation * highProgress).toInt().toShort())
        newEq.setBandLevel(bands[4], (maxAttenuation * (1 - highProgress)).toInt().toShort())
    }

    private fun applyEnhancedHarmonicEq(oldEq: Equalizer, newEq: Equalizer, progress: Float, bands: ShortArray, oldSong: Song?, newSong: Song?) {
        // Usamos una atenuaci√≥n muy ligera, el objetivo es esculpir, no cortar.
        val maxAttenuation = EQ_LIGHT_ATTENUATION// -400, muy sutil

        // Curva de progreso extra suave, ideal para disolver sonidos.
        val curve = 0.5f * (1 - cos(progress * Math.PI.toFloat()))

        // --- L√≥gica para la canci√≥n que SALE (oldEq) ---
        // El objetivo es "ahuecar" suavemente el centro para hacer sitio a la nueva canci√≥n.
        val midScoop = (maxAttenuation * curve * 0.8f).toInt().toShort()      // Un "valle" m√°s pronunciado en los medios
        val highReduction = (maxAttenuation * curve * 0.4f).toInt().toShort() // Reducci√≥n ligera de agudos para quitar "brillo"

        // Bajos casi intactos para mantener el "cuerpo" de la canci√≥n que se va.
        oldEq.setBandLevel(bands[0], (maxAttenuation * curve * 0.1f).toInt().toShort())
        oldEq.setBandLevel(bands[1], midScoop)
        oldEq.setBandLevel(bands[2], midScoop)
        oldEq.setBandLevel(bands[3], highReduction)
        oldEq.setBandLevel(bands[4], highReduction)

        // --- L√≥gica para la canci√≥n que ENTRA (newEq) ---
        // Empieza con un sonido "filtrado" y termina en plano (natural).
        val initialMidScoop = (maxAttenuation * (1 - curve) * 0.8f).toInt().toShort()
        val initialHighReduction = (maxAttenuation * (1 - curve) * 0.4f).toInt().toShort()

        newEq.setBandLevel(bands[0], (maxAttenuation * (1 - curve) * 0.1f).toInt().toShort())
        newEq.setBandLevel(bands[1], initialMidScoop)
        newEq.setBandLevel(bands[2], initialMidScoop)
        newEq.setBandLevel(bands[3], initialHighReduction)
        newEq.setBandLevel(bands[4], initialHighReduction)
    }

    private fun applyEnhancedRhythmicEq(oldEq: Equalizer, newEq: Equalizer, progress: Float, bands: ShortArray, oldSong: Song?, newSong: Song?) {
        // Definimos las bandas: graves (el beat), medios (voces, melod√≠as) y agudos.
        val bassBand = bands[0]
        val midBands = bands.sliceArray(1..3)
        val highBands = bands.sliceArray(4..4) // O la √∫ltima banda que tengas

        // FASE 1: Introducir la nueva canci√≥n sin su bajo (progreso 0% -> 50%)
        if (progress < 0.5f) {
            // Calculamos el progreso dentro de esta fase (de 0.0 a 1.0)
            val stageProgress = progress / 0.5f

            // Canci√≥n que SALE (oldEq):
            // Mantenemos su bajo intacto (plano) y empezamos a cortar suavemente los medios y agudos.
            oldEq.setBandLevel(bassBand, 0)
            midBands.forEach { band -> oldEq.setBandLevel(band, (EQ_MEDIUM_ATTENUATION * stageProgress * 0.5f).toInt().toShort()) }
            highBands.forEach { band -> oldEq.setBandLevel(band, (EQ_MEDIUM_ATTENUATION * stageProgress).toInt().toShort()) }

            // Canci√≥n que ENTRA (newEq):
            // Mantenemos su bajo COMPLETAMENTE CORTADO e introducimos sus medios y agudos.
            newEq.setBandLevel(bassBand, EQ_MAX_ATTENUATION)
            midBands.forEach { band -> newEq.setBandLevel(band, (EQ_MAX_ATTENUATION * (1 - stageProgress)).toInt().toShort()) }
            highBands.forEach { band -> newEq.setBandLevel(band, (EQ_MAX_ATTENUATION * (1 - stageProgress)).toInt().toShort()) }

            // FASE 2: Intercambiar los bajos (Bass Swap) (progreso 50% -> 100%)
        } else {
            // Calculamos el progreso dentro de esta fase (de 0.0 a 1.0)
            val stageProgress = (progress - 0.5f) / 0.5f

            // Canci√≥n que SALE (oldEq):
            // Ahora s√≠, cortamos su bajo y terminamos de eliminar los medios/agudos.
            oldEq.setBandLevel(bassBand, (EQ_MAX_ATTENUATION * stageProgress).toInt().toShort())
            midBands.forEach { band -> oldEq.setBandLevel(band, ((EQ_MEDIUM_ATTENUATION * 0.5f) + (EQ_MEDIUM_ATTENUATION * 0.5f * stageProgress)).toInt().toShort()) }
            highBands.forEach { band -> oldEq.setBandLevel(band, EQ_MEDIUM_ATTENUATION) } // Ya cortados

            // Canci√≥n que ENTRA (newEq):
            // Sus medios y agudos ya est√°n presentes (planos). AHORA introducimos su bajo.
            newEq.setBandLevel(bassBand, (EQ_MAX_ATTENUATION * (1 - stageProgress)).toInt().toShort())
            midBands.forEach { band -> newEq.setBandLevel(band, 0) }
            highBands.forEach { band -> newEq.setBandLevel(band, 0) }
        }
    }

    private fun applyEnhancedStandardEq(oldEq: Equalizer, newEq: Equalizer, progress: Float, bands: ShortArray) {
        val enhancedCurve = 0.5f * (1 - cos(progress * Math.PI.toFloat()))
        val superSmoothCurve = enhancedCurve.pow(0.8f)

        bands.forEach { band ->
            // ‚úÖ CORRECCI√ìN APLICADA
            oldEq.setBandLevel(band, (EQ_MAX_ATTENUATION * superSmoothCurve).toInt().toShort())
            newEq.setBandLevel(band, (EQ_MAX_ATTENUATION * (1 - superSmoothCurve)).toInt().toShort())
        }
    }

    private fun applyStemSwapEq(oldEq: Equalizer, newEq: Equalizer, progress: Float, bands: ShortArray) {
        val bassBands = shortArrayOf(0)
        val midBands = shortArrayOf(1, 2)
        val highBands = shortArrayOf(3, 4)

        val MAX_ATT = EQ_MAX_ATTENUATION
        val FLAT: Short = 0

        // Fase 1 (0% -> 25%): Introducir agudos de la nueva canci√≥n
        if (progress < 0.25f) {
            val stageProgress = (progress / 0.25f)

            // oldEq: Sigue sonando normal
            bassBands.forEach { oldEq.setBandLevel(it, FLAT) }
            midBands.forEach { oldEq.setBandLevel(it, FLAT) }
            highBands.forEach { oldEq.setBandLevel(it, FLAT) }

            // newEq: Entra solo con agudos (Graves y Medios cortados)
            bassBands.forEach { newEq.setBandLevel(it, MAX_ATT) }
            midBands.forEach { newEq.setBandLevel(it, MAX_ATT) }
            highBands.forEach { band ->
                newEq.setBandLevel(band, (MAX_ATT * (1 - stageProgress)).toInt().toShort())
            }
        }
        // Fase 2 (25% -> 50%): Intercambiar los bajos (Bass Swap)
        else if (progress < 0.5f) {
            val stageProgress = ((progress - 0.25f) / 0.25f)

            // oldEq: Empieza a perder sus bajos
            bassBands.forEach { band ->
                oldEq.setBandLevel(band, (MAX_ATT * stageProgress).toInt().toShort())
            }
            midBands.forEach { oldEq.setBandLevel(it, FLAT) }
            highBands.forEach { oldEq.setBandLevel(it, FLAT) }

            // newEq: Introduce sus bajos, mantiene agudos, medios siguen cortados
            bassBands.forEach { band ->
                newEq.setBandLevel(band, (MAX_ATT * (1 - stageProgress)).toInt().toShort())
            }
            midBands.forEach { newEq.setBandLevel(it, MAX_ATT) }
            highBands.forEach { newEq.setBandLevel(it, FLAT) } // Agudos ya entraron
        }
        // Fase 3 (50% -> 75%): Intercambiar los medios (Mid Swap)
        else if (progress < 0.75f) {
            val stageProgress = ((progress - 0.5f) / 0.25f)

            // oldEq: Bajos cortados, empieza a perder medios
            bassBands.forEach { oldEq.setBandLevel(it, MAX_ATT) }
            midBands.forEach { band ->
                oldEq.setBandLevel(band, (MAX_ATT * stageProgress).toInt().toShort())
            }
            highBands.forEach { oldEq.setBandLevel(it, FLAT) }

            // newEq: Bajos y agudos presentes, introduce medios
            bassBands.forEach { newEq.setBandLevel(it, FLAT) }
            midBands.forEach { band ->
                newEq.setBandLevel(band, (MAX_ATT * (1 - stageProgress)).toInt().toShort())
            }
            highBands.forEach { newEq.setBandLevel(it, FLAT) }
        }
        // Fase 4 (75% -> 100%): Limpiar agudos de la canci√≥n antigua
        else {
            val stageProgress = ((progress - 0.75f) / 0.25f)

            // oldEq: Bajos y medios cortados, pierde agudos
            bassBands.forEach { oldEq.setBandLevel(it, MAX_ATT) }
            midBands.forEach { oldEq.setBandLevel(it, MAX_ATT) }
            highBands.forEach { band ->
                oldEq.setBandLevel(band, (MAX_ATT * stageProgress).toInt().toShort())
            }

            // newEq: Todo presente (plano)
            bassBands.forEach { newEq.setBandLevel(it, FLAT) }
            midBands.forEach { newEq.setBandLevel(it, FLAT) }
            highBands.forEach { newEq.setBandLevel(it, FLAT) }
        }
    }

    private fun getStemSwapVolumeCurve(progress: Float): Pair<Float, Float> {
        val p = progress.coerceIn(0f, 1f)

        // La canci√≥n antigua se mantiene fuerte durante m√°s tiempo para que su melod√≠a se escuche sobre el nuevo beat
        val oldVol = 1.0f - p.pow(3) // Cae muy bruscamente al final

        // La nueva canci√≥n entra de forma m√°s controlada y gradual
        val newVol = p.pow(0.8f)

        return Pair(oldVol.coerceIn(0f, 1f), newVol.coerceIn(0f, 1f))
    }

    private fun calculateDynamicEqStartPoint(strategy: MixStrategy, progress: Float): Float {
        // ‚úÖ CORRECCI√ìN: El punto de inicio del EQ ahora es un valor FIJO por estrategia.
        // Ya no depende de 'progress', eliminando el efecto "on-off-on".
        return when (strategy) {
            // Las mezclas arm√≥nicas deben empezar su EQ muy sutilmente y muy pronto.
            MixStrategy.HARMONIC_BLEND -> 0.10f // Empieza al 10% de la mezcla

            // Las mezclas por beat pueden esperar un poco m√°s para que el beat se asiente.
            MixStrategy.BEATMATCH_MIX -> 0.20f // Empieza al 20%

            // Stem Swap tiene su propia l√≥gica interna, este valor no le afecta.
            MixStrategy.STEM_SWAP_MIX -> 0.0f

            // El resto empieza un poco antes de la mitad.
            else -> 0.25f
        }
    }

    private fun calculateMusicalCurve(progress: Float, strategy: MixStrategy, oldSong: Song?, newSong: Song? ): Float {
        val baseCurve = 0.5f * (1 - cos(progress * Math.PI.toFloat()))

        // ‚úÖ MODIFICAR CURVA SEG√öN CRITERIOS MUSICALES
        return when (strategy) {
            MixStrategy.BEATMATCH_MIX -> {
                val bpmFactor = calculateBpmFactor(oldSong, newSong)
                baseCurve.pow(0.8f + bpmFactor * 0.2f)
            }
            MixStrategy.HARMONIC_BLEND -> {
                val harmonicFactor = calculateHarmonicFactor(oldSong, newSong)
                baseCurve.pow(0.7f + harmonicFactor * 0.3f)
            }
            MixStrategy.RHYTHMIC_FADE -> {
                val rhythmicFactor = calculateRhythmicFactor(oldSong, newSong)
                baseCurve.pow(0.9f + rhythmicFactor * 0.1f)
            }
            else -> baseCurve.pow(0.85f)
        }
    }

    private fun calculateBpmFactor(oldSong: Song?, newSong: Song?): Float {
        val oldBpm = oldSong?.audioAnalysis?.bpmNormalized ?: 120.0
        val newBpm = newSong?.audioAnalysis?.bpmNormalized ?: 120.0

        // ‚úÖ Comprobaci√≥n de robustez
        if (oldBpm <= 0 || newBpm <= 0) return 0.5f // Devuelve un valor neutro

        val bpmDiff = abs(oldBpm - newBpm)
        return when {
            bpmDiff < 5 -> 1.0f
            bpmDiff < 15 -> 0.7f
            bpmDiff < 30 -> 0.4f
            else -> 0.2f
        }
    }

    private fun calculateHarmonicFactor(oldSong: Song?, newSong: Song?): Float {
        val oldKey = oldSong?.audioAnalysis?.musicalKey
        val newKey = newSong?.audioAnalysis?.musicalKey
        return calculateHarmonicCompatibility(oldKey, newKey)
    }

    private fun calculateRhythmicFactor(oldSong: Song?, newSong: Song?): Float {
        val oldBpm = oldSong?.audioAnalysis?.bpmNormalized ?: 120.0
        val newBpm = newSong?.audioAnalysis?.bpmNormalized ?: 120.0
        return calculateRhythmicCompatibility(oldBpm, newBpm)
    }

    private fun applyVolumeSmoothly(oldPlayer: ExoPlayer, newPlayer: ExoPlayer, oldVol: Float, newVol: Float, gainAdjustment: Float) {
        try {
            // [MANTENIDO] Tu l√≥gica de suavizado y ganancia es el coraz√≥n del efecto. No cambia.
            val smoothedOldVol = smoothVolumeCurve(oldVol)
            val smoothedNewVol = smoothVolumeCurve(newVol) * gainAdjustment

            // [CAMBIO CLAVE] Usamos la propiedad `.volume` de ExoPlayer, que es m√°s simple.
            oldPlayer.volume = smoothedOldVol
            newPlayer.volume = smoothedNewVol

            // [MANTENIDO] Tu log de depuraci√≥n es √∫til y se queda.
            if ((oldVol * 10).toInt() % 2 == 0) {
                Log.d("IntelligentCrossfade", "üîä Volumen - Old: ${"%.2f".format(smoothedOldVol)}, New: ${"%.2f".format(smoothedNewVol)}")
            }
        } catch (e: Exception) {
            // [MANTENIDO] El manejo de errores y el re-lanzamiento son cruciales para que
            // el bucle de animaci√≥n principal se detenga y llame a `handleMixFailure`.
            Log.e("IntelligentCrossfade", "‚ùå Error al ajustar volumen de ExoPlayer", e)
            throw e // Re-lanzar para manejo superior
        }
    }

    private fun smoothVolumeCurve(volume: Float): Float {
        // Aplicar curva de ease-in-out adicional para mayor suavidad
        return if (volume <= 0.5f) {
            2 * volume * volume
        } else {
            1 - 2 * (1 - volume) * (1 - volume)
        }
    }

    private fun calculateFullyIntelligentDuration(oldSong: Song, newSong: Song, strategy: MixStrategy): Long {
        val oldAnalysis = oldSong.audioAnalysis
        val newAnalysis = newSong.audioAnalysis

        if (oldAnalysis == null || newAnalysis == null) {
            Log.w("IntelligentCrossfade", "‚ö†Ô∏è Sin an√°lisis, usando duraci√≥n inteligente predeterminada")
            return getDefaultDurationByStrategy(strategy)
        }

        val duration = when (strategy) {
            MixStrategy.BEATMATCH_MIX -> calculateBeatmatchDurationAdvanced(oldAnalysis, newAnalysis)
            MixStrategy.HARMONIC_BLEND -> calculateHarmonicDuration(oldAnalysis, newAnalysis)
            MixStrategy.RHYTHMIC_FADE -> calculateRhythmicDuration(oldAnalysis, newAnalysis)
            else -> calculateStandardDuration(oldAnalysis, newAnalysis)
        }

        // ‚úÖ LOG DETALLADO
        logDurationCalculation(strategy, oldSong, newSong, duration)

        return duration
    }

    private fun calculateStandardDuration(oldAnalysis: AudioAnalysis, newAnalysis: AudioAnalysis): Long {
        Log.d("IntelligentCrossfade", "üìè Calculando duraci√≥n est√°ndar inteligente")

        val oldBpm = oldAnalysis.bpmNormalized
        val newBpm = newAnalysis.bpmNormalized
        val oldKey = oldAnalysis.musicalKey
        val newKey = newAnalysis.musicalKey

        // ‚úÖ FACTOR DE COMPATIBILIDAD GENERAL
        val bpmCompatibility = calculateRhythmicCompatibility(oldBpm, newBpm)
        val harmonicCompatibility = calculateHarmonicCompatibility(oldKey, newKey)
        val overallCompatibility = (bpmCompatibility + harmonicCompatibility) / 2.0f

        Log.d("IntelligentCrossfade", "üéµ Compatibilidad - BPM: ${"%.2f".format(bpmCompatibility)}, Arm√≥nica: ${"%.2f".format(harmonicCompatibility)}, General: ${"%.2f".format(overallCompatibility)}")

        // ‚úÖ DURACI√ìN BASADA EN COMPATIBILIDAD
        val baseDuration = when {
            overallCompatibility >= 0.8 -> 10000L  // Alta compatibilidad - mezcla m√°s larga
            overallCompatibility >= 0.6 -> 8000L   // Compatibilidad media - duraci√≥n media
            overallCompatibility >= 0.4 -> 6000L   // Compatibilidad baja - mezcla m√°s corta
            else -> 5000L                          // Muy baja compatibilidad - mezcla m√≠nima
        }

        // ‚úÖ AJUSTE POR BPM (canciones r√°pidas necesitan m√°s tiempo)
        val bpmAdjustment = when {
            oldBpm > 140 || newBpm > 140 -> 1.3f   // M√∫sica r√°pida - +30%
            oldBpm > 120 || newBpm > 120 -> 1.15f  // M√∫sica media-r√°pida - +15%
            oldBpm < 80 || newBpm < 80 -> 0.9f     // M√∫sica lenta - -10%
            else -> 1.0f                           // Sin ajuste
        }

        // ‚úÖ AJUSTE POR DURACI√ìN DE LAS CANCIONES
        val oldDuration = oldAnalysis.durationMs
        val newDuration = newAnalysis.durationMs
        val avgDuration = (oldDuration + newDuration) / 2.0

        val durationAdjustment = when {
            avgDuration > 300000 -> 1.2f   // Canciones largas (>5min) - +20%
            avgDuration > 240000 -> 1.1f   // Canciones medias-largas (>4min) - +10%
            avgDuration < 120000 -> 0.8f   // Canciones cortas (<2min) - -20%
            else -> 1.0f                   // Sin ajuste
        }

        val calculatedDuration = (baseDuration * bpmAdjustment * durationAdjustment).toLong()
        val finalDuration = calculatedDuration.coerceIn(4000L, 15000L)

        Log.d("IntelligentCrossfade", "‚è±Ô∏è Duraci√≥n est√°ndar calculada: ${finalDuration}ms (Base: ${baseDuration}ms, BPM x${"%.2f".format(bpmAdjustment)}, Duraci√≥n x${"%.2f".format(durationAdjustment)})")

        return finalDuration
    }

    private fun calculateRhythmicDuration(oldAnalysis: AudioAnalysis, newAnalysis: AudioAnalysis): Long {
        Log.d("IntelligentCrossfade", "ü•Å Calculando duraci√≥n r√≠tmica inteligente")

        val oldBpm = oldAnalysis.bpmNormalized
        val newBpm = newAnalysis.bpmNormalized
        val bpmDiff = abs(oldBpm - newBpm)
        val avgBpm = (oldBpm + newBpm) / 2.0

        // ‚úÖ COMPATIBILIDAD R√çTMICA DETALLADA
        val rhythmicCompatibility = calculateRhythmicCompatibility(oldBpm, newBpm)

        Log.d("IntelligentCrossfade", "üéµ An√°lisis r√≠tmico - BPM: $oldBpm->$newBpm, Diff: ${"%.1f".format(bpmDiff)}, Compat: ${"%.2f".format(rhythmicCompatibility)}")

        // ‚úÖ DURACI√ìN BASE SEG√öN COMPATIBILIDAD R√çTMICA
        val baseDuration = when {
            rhythmicCompatibility >= 0.9 -> 9000L   // R√≠tmicamente id√©nticas
            rhythmicCompatibility >= 0.8 -> 8000L   // Muy similares
            rhythmicCompatibility >= 0.7 -> 7000L   // Similares
            rhythmicCompatibility >= 0.6 -> 6000L   // Moderadamente similares
            else -> 5000L                           // Poco similares
        }

        // ‚úÖ AJUSTE POR DIFERENCIA DE BPM ESPEC√çFICA
        val bpmDiffAdjustment = when {
            bpmDiff < 2 -> 1.3f    // BPM casi id√©nticos - mezcla m√°s larga
            bpmDiff < 5 -> 1.1f    // BPM muy similares - mezcla ligeramente m√°s larga
            bpmDiff < 10 -> 1.0f   // BPM similares - duraci√≥n est√°ndar
            bpmDiff < 20 -> 0.9f   // BPM diferentes - mezcla m√°s corta
            else -> 0.8f           // BPM muy diferentes - mezcla m√≠nima
        }

        // ‚úÖ AJUSTE POR VELOCIDAD ABSOLUTA (BPM promedio)
        val speedAdjustment = when {
            avgBpm > 160 -> 0.7f   // Muy r√°pido - mezcla m√°s corta (Techno, Drum & Bass)
            avgBpm > 140 -> 0.8f   // R√°pido - mezcla corta (House, EDM)
            avgBpm > 120 -> 0.9f   // Medio-r√°pido - mezcla media (Pop, Rock)
            avgBpm > 100 -> 1.0f   // Medio - duraci√≥n est√°ndar
            avgBpm > 80 -> 1.1f    // Medio-lento - mezcla m√°s larga
            else -> 1.2f           // Lento - mezcla m√°s larga (Baladas, Ambient)
        }

        // ‚úÖ AJUSTE POR COMPLEJIDAD R√çTMICA (basado en beat grid)
        val oldBeats = oldAnalysis.beatGridJson.size
        val newBeats = newAnalysis.beatGridJson.size
        val rhythmicComplexity = if (oldBeats > 0 && newBeats > 0) {
            val avgBeats = (oldBeats + newBeats) / 2.0
            val duration = max(oldAnalysis.durationMs, newAnalysis.durationMs)
            val beatsPerMinute = (avgBeats / duration) * 60000.0

            when {
                beatsPerMinute > 300 -> 1.2f  // Muy complejo (breakbeats, polyrhythms)
                beatsPerMinute > 200 -> 1.1f  // Complejo (syncopation)
                beatsPerMinute > 120 -> 1.0f  // Est√°ndar
                else -> 0.9f                  // Simple
            }
        } else {
            1.0f
        }

        val calculatedDuration = (baseDuration * bpmDiffAdjustment * speedAdjustment * rhythmicComplexity).toLong()
        val finalDuration = calculatedDuration.coerceIn(4000L, 12000L)

        Log.d("IntelligentCrossfade", "‚è±Ô∏è Duraci√≥n r√≠tmica calculada: ${finalDuration}ms")
        Log.d("IntelligentCrossfade", "üìä Factores - Base: ${baseDuration}ms, BPM Diff x${"%.2f".format(bpmDiffAdjustment)}, Speed x${"%.2f".format(speedAdjustment)}, Complexity x${"%.2f".format(rhythmicComplexity)}")

        return finalDuration
    }

    private fun verifyPlayersState(oldPlayer: ExoPlayer, newPlayer: ExoPlayer): Boolean {
        return try {
            // [CAMBIO] Usamos la propiedad .isPlaying de ExoPlayer. La l√≥gica es id√©ntica.
            val oldPlayerOk = oldPlayer.isPlaying || (!oldPlayer.isPlaying && isTransitioning)
            val newPlayerOk = newPlayer.isPlaying

            if (!newPlayerOk) {
                Log.w("IntelligentCrossfade", "‚ö†Ô∏è NewPlayer (ExoPlayer) no est√° reproduciendo, intentando recuperar")
                try {
                    // [CAMBIO] El equivalente a .start() en ExoPlayer es .play()
                    newPlayer.play()
                    // [MANTENIDO] Dar un respiro m√≠nimo es una buena pr√°ctica de robustez.
                    Thread.sleep(10)
                } catch (e: Exception) {
                    Log.e("IntelligentCrossfade", "‚ùå No se pudo recuperar newPlayer (ExoPlayer)", e)
                    return false
                }
            }

            if (!oldPlayerOk && isTransitioning) {
                Log.w("IntelligentCrossfade", "‚ö†Ô∏è OldPlayer (ExoPlayer) dej√≥ de reproducir durante transici√≥n")
                // [MANTENIDO] Tu comentario sobre que esto puede ser normal es correcto.
            }

            true
        } catch (e: Exception) {
            // [SIMPLIFICADO] Un √∫nico bloque catch es suficiente, ya que IllegalStateException es muy raro
            // al simplemente consultar el estado de ExoPlayer.
            Log.e("IntelligentCrossfade", "‚ùå Error inesperado verificando estado de ExoPlayers", e)
            false
        }
    }

    private fun calculateBeatmatchDurationAdvanced(oldAnalysis: AudioAnalysis, newAnalysis: AudioAnalysis): Long {
        val bpm1 = oldAnalysis.bpmNormalized
        val bpm2 = newAnalysis.bpmNormalized

        // ‚úÖ DURACI√ìN BASADA EN COMPASES PARA BEATMATCHING
        val avgBpm = (bpm1 + bpm2) / 2.0
        val bpmDiff = abs(bpm1 - bpm2)

        val beatsNeeded = when {
            bpmDiff < 2 -> 32  // BPM muy similares - mezcla larga
            bpmDiff < 5 -> 24  // BPM similares - mezcla media
            bpmDiff < 10 -> 16 // BPM diferentes - mezcla m√°s corta
            else -> 8          // BPM muy diferentes - mezcla corta
        }

        val durationFromBeats = ((60000.0 / avgBpm) * beatsNeeded).toLong()
        val structureDuration = calculateStructureBasedDuration(oldAnalysis, newAnalysis)

        // Usar la mayor duraci√≥n entre estructura y beatmatching
        return max(durationFromBeats, structureDuration).coerceIn(8000L, 20000L)
    }

    private fun calculateHarmonicDuration(oldAnalysis: AudioAnalysis, newAnalysis: AudioAnalysis): Long {
        val compatibility = calculateHarmonicCompatibility(oldAnalysis.musicalKey, newAnalysis.musicalKey)

        // ‚úÖ MEJORA: Las mezclas arm√≥nicas ahora son m√°s largas y majestuosas.
        return when {
            compatibility >= 0.9 -> 16000L // Compatibilidad casi perfecta -> mezcla muy larga y cinematogr√°fica
            compatibility >= 0.7 -> 12000L // Buena compatibilidad -> mezcla larga est√°ndar
            else -> 9000L                  // Compatibilidad decente -> mezcla de duraci√≥n media
        }.coerceIn(8000L, 20000L) // Aseguramos que NUNCA sea menor de 8 segundos.
    }

    private fun getDefaultDurationByStrategy(strategy: MixStrategy): Long {
        return when (strategy) {
            MixStrategy.BEATMATCH_MIX -> 12000L
            MixStrategy.HARMONIC_BLEND -> 10000L
            MixStrategy.RHYTHMIC_FADE -> 8000L
            else -> 8000L
        }
    }

    private fun calculateStructureBasedDuration(oldAnalysis: AudioAnalysis, newAnalysis: AudioAnalysis): Long {
        Log.d("IntelligentCrossfade", "üèóÔ∏è Calculando duraci√≥n basada en estructura")

        // Usar puntos √≥ptimos existentes en tu AudioAnalysis
        val oldOutPoint = oldAnalysis.optimalExitPointMs ?: (oldAnalysis.durationMs - 8000).coerceAtLeast(0)
        val newInPoint = newAnalysis.optimalStartPointMs ?: newAnalysis.audioStartMs

        // Calcular duraci√≥n basada en la posici√≥n de los puntos √≥ptimos
        val oldRemaining = oldAnalysis.durationMs - oldOutPoint
        val newIntro = newInPoint

        // La duraci√≥n debe cubrir ambos segmentos
        val calculatedDuration = max(oldRemaining, newIntro).toLong()
        val finalDuration = calculatedDuration.coerceIn(6000L, 12000L)

        Log.d("IntelligentCrossfade", "üìç Puntos estructurales - Salida: ${oldOutPoint}ms, Entrada: ${newInPoint}ms")
        Log.d("IntelligentCrossfade", "‚è±Ô∏è Duraci√≥n estructural: ${finalDuration}ms")

        return finalDuration
    }

    private fun logDurationCalculation(strategy: MixStrategy, oldSong: Song, newSong: Song, finalDuration: Long) {
        val oldAnalysis = oldSong.audioAnalysis
        val newAnalysis = newSong.audioAnalysis

        if (oldAnalysis != null && newAnalysis != null) {
            Log.i("IntelligentCrossfade", "üéØ RESUMEN DE DURACI√ìN - ${strategy.name}")
            Log.i("IntelligentCrossfade", "üéµ Canciones: ${oldSong.title} -> ${newSong.title}")
            Log.i("IntelligentCrossfade", "ü•Å BPM: ${oldAnalysis.bpmNormalized} -> ${newAnalysis.bpmNormalized}")
            Log.i("IntelligentCrossfade", "üéº Tonalidad: ${oldAnalysis.musicalKey} -> ${newAnalysis.musicalKey}")
            Log.i("IntelligentCrossfade", "‚è±Ô∏è Duraci√≥n final: ${finalDuration}ms")
            Log.i("IntelligentCrossfade", "üìç Puntos √≥ptimos - Salida: ${oldAnalysis.optimalExitPointMs ?: "Auto"}ms, Entrada: ${newAnalysis.optimalStartPointMs ?: "Auto"}ms")
        }
    }

    private fun findOptimalOutPoint(analysis: AudioAnalysis?): Int {
        if (analysis == null) return 0

        analysis.optimalExitPointMs?.let { return it }

        val duration = analysis.durationMs
        val bpm = analysis.bpmNormalized

        // Para canciones r√°pidas, salir antes; para lentas, salir m√°s tarde
        val baseOutPoint = when {
            bpm > 140 -> duration - 12000 // EDM, Techno - transiciones m√°s largas
            bpm > 100 -> duration - 10000 // Pop, Rock - duraci√≥n media
            else -> duration - 8000       // Baladas, Jazz - transiciones cortas
        }

        return baseOutPoint.coerceAtLeast(duration - 16000).coerceAtLeast(0)
    }

    private fun findOptimalInPoint(analysis: AudioAnalysis?): Int {
        if (analysis == null) return 0

        // ‚úÖ PRIORIDAD: Punto de entrada √≥ptimo del an√°lisis
        analysis.optimalStartPointMs?.let { return it }

        // ‚úÖ CALCULAR BASADO EN ESTRUCTURA MUSICAL
        val audioStart = analysis.audioStartMs
        val bpm = analysis.bpmNormalized
        val key = analysis.musicalKey

        // Para diferentes g√©neros y tonalidades, ajustar punto de entrada
        val calculatedInPoint = when {
            // Canciones con intros largas (ambient, classical)
            audioStart > 5000 -> audioStart
            // Canciones r√°pidas - entrar en el primer beat fuerte
            bpm > 120 -> max(audioStart, 2000)
            // Canciones con tonalidades complejas - buscar punto arm√≥nico
            key != null && key.contains("m") -> max(audioStart, 1500) // Menores - entrada m√°s suave
            else -> max(audioStart, 1000) // Entrada est√°ndar
        }

        return calculatedInPoint.coerceAtMost(analysis.durationMs - 5000)
    }

    private fun calculateRhythmicCompatibility(bpm1: Double, bpm2: Double): Float {
        val ratio = max(bpm1, bpm2) / min(bpm1, bpm2)

        return when {
            ratio < 1.1 -> 1.0f    // Muy similar
            ratio < 1.25 -> 0.8f   // Similar
            ratio < 1.5 -> 0.6f    // Moderado
            ratio < 2.0 -> 0.4f    // Diferente
            else -> 0.2f           // Muy diferente
        }
    }

    private fun areGenresSimilar(bpm1: Double, bpm2: Double): Boolean {
        val genre1 = detectGenreByBPM(bpm1)
        val genre2 = detectGenreByBPM(bpm2)

        return genre1 == genre2 || areGenresCompatible(genre1, genre2)
    }

    private fun areGenresCompatible(genre1: String, genre2: String): Boolean {
        val compatiblePairs = setOf(
            "HipHop" to "Pop",
            "Rock" to "Pop",
            "House" to "Techno",
            "Pop" to "House"
        )
        return (genre1 to genre2) in compatiblePairs || (genre2 to genre1) in compatiblePairs
    }

    private fun detectGenreByBPM(bpm: Double): String {
        return when {
            bpm < 60 -> "Ambient"
            bpm < 90 -> "HipHop"
            bpm < 110 -> "Rock"
            bpm < 130 -> "Pop"
            bpm < 150 -> "House"
            else -> "Techno"
        }
    }

    private fun calculateHarmonicCompatibility(key1: String?, key2: String?): Float {
        if (key1.isNullOrBlank() || key2.isNullOrBlank()) return 0f

        val numKey1 = parseKeyToNumeric(key1)
        val numKey2 = parseKeyToNumeric(key2)
        if (numKey1 == -1 || numKey2 == -1) return 0f

        val diff = abs(numKey1 - numKey2)

        return when (diff) {
            0 -> 1.0f    // Misma tonalidad
            3, 9 -> 0.9f // Relativo menor/mayor
            5, 7 -> 0.8f // 4ta/5ta justa
            1, 11 -> 0.7f // Semitono arriba/abajo
            2, 10 -> 0.6f // Tono arriba/abajo
            else -> 0.3f  // Baja compatibilidad
        }
    }

    private fun calculateAutomixStrategy(song1: Song, song2: Song): MixStrategy {
        val analysis1 = song1.audioAnalysis
        val analysis2 = song2.audioAnalysis
        if (analysis1 == null || analysis2 == null) return MixStrategy.STANDARD_CROSSFADE

        val bpm1 = analysis1.bpmNormalized
        val bpm2 = analysis2.bpmNormalized
        val key1 = analysis1.musicalKey
        val key2 = analysis2.musicalKey

        Log.d("IntelligentCrossfade", "üéµ An√°lisis - BPM: $bpm1->$bpm2, Key: $key1->$key2")

        // ‚úÖ CRITERIO 1: COMPATIBILIDAD DE BPM (BEATMATCH)
        val bpmDiff = abs(bpm1 - bpm2)
        val bpmRatio = bpmDiff / min(bpm1, bpm2)
        val harmonicCompatibility = calculateHarmonicCompatibility(key1, key2)
        val isBpmCompatible = bpmRatio < BEATMATCH_BPM_TOLERANCE
        val isSimilarGenre = areGenresSimilar(bpm1, bpm2)

        // ‚úÖ CRITERIO 0 (M√ÅXIMA PRIORIDAD): STEM SWAP MIX
        // Se activa solo si los BPM son casi id√©nticos Y la armon√≠a es muy alta.
        val isBpmPerfect = bpmRatio < (BEATMATCH_BPM_TOLERANCE / 2) // Tolerancia m√°s estricta
        if (isBpmPerfect && harmonicCompatibility >= 0.8f) {
            Log.d("IntelligentCrossfade", "üëë STEM_SWAP_MIX seleccionado - Condiciones perfectas!")
            return MixStrategy.STEM_SWAP_MIX
        }

        if (isBpmCompatible && isSimilarGenre) {
            Log.d("IntelligentCrossfade", "üéØ BEATMATCH_MIX seleccionado - BPM compatibles")
            return MixStrategy.BEATMATCH_MIX
        }

        // ‚úÖ CRITERIO 2: COMPATIBILIDAD ARM√ìNICA MEJORADA
        if (harmonicCompatibility >= 0.7) {
            Log.d("IntelligentCrossfade", "üéµ HARMONIC_BLEND seleccionado - Alta compatibilidad arm√≥nica: $harmonicCompatibility")
            return MixStrategy.HARMONIC_BLEND
        }

        // ‚úÖ CRITERIO 3: COMPATIBILIDAD R√çTMICA
        val rhythmicCompatibility = calculateRhythmicCompatibility(bpm1, bpm2)
        if (rhythmicCompatibility >= 0.6) {
            Log.d("IntelligentCrossfade", "ü•Å RHYTHMIC_FADE seleccionado - Compatibilidad r√≠tmica: $rhythmicCompatibility")
            return MixStrategy.RHYTHMIC_FADE
        }

        Log.d("IntelligentCrossfade", "üîÑ STANDARD_CROSSFADE seleccionado - Baja compatibilidad musical")
        return MixStrategy.STANDARD_CROSSFADE
    }

    private fun resetEqToFlat(eq: Equalizer, bands: ShortArray) {
        bands.forEach { band ->
            eq.setBandLevel(band, 0) // Nivel plano
        }
    }

    private fun resetEqToCut(eq: Equalizer, bands: ShortArray) {
        bands.forEach { band ->
            eq.setBandLevel(band, EQ_MAX_ATTENUATION) // Nivel cortado
        }
    }

    private fun calculateBeatAlignment(oldBeats: List<Int>, newBeats: List<Int>, oldPlayerCurrentPosition: Long): Int {
        if (oldBeats.isEmpty() || newBeats.isEmpty()) return 0

        val currentTime = oldPlayerCurrentPosition.toInt()

        val nextOldBeat = oldBeats.firstOrNull { it > currentTime } ?: oldBeats.last()
        val closestNewBeat = newBeats.minByOrNull { abs(it - nextOldBeat) } ?: 0

        return (closestNewBeat - nextOldBeat).coerceIn(-2000, 2000)
    }

    private fun syncTempo(oldPlayer: ExoPlayer, oldAnalysis: AudioAnalysis, newAnalysis: AudioAnalysis, newPlayer: ExoPlayer) {
        try {
            val speedAdjustment = (oldAnalysis.bpmNormalized / newAnalysis.bpmNormalized).toFloat()
            val clampedSpeed = speedAdjustment.coerceIn(0.92f, 1.08f)

            // üî• DECLARAMOS la variable finalSpeed aqu√≠
            var finalSpeed = clampedSpeed

            val beatAlignment = calculateBeatAlignment(oldAnalysis.beatGridJson, newAnalysis.beatGridJson, oldPlayer.currentPosition)
            if (abs(beatAlignment) > 100) {
                val fineTune = (beatAlignment / 1000f).coerceIn(-0.05f, 0.05f)
                finalSpeed += fineTune
                Log.d("IntelligentCrossfade", "‚è±Ô∏è Ajuste fino: ${"%.3f".format(fineTune)}x, Alineaci√≥n: ${beatAlignment}ms")
            }

            val playbackParameters = PlaybackParameters(finalSpeed)
            newPlayer.playbackParameters = playbackParameters
            Log.d("IntelligentCrossfade", "‚è±Ô∏è Sincronizando tempo. Ajuste final: ${"%.3f".format(finalSpeed)}x")

        } catch (e: Exception) { // <-- üî• A√ëADIMOS EL BLOQUE CATCH QUE FALTABA
            Log.e("IntelligentCrossfade", "Error al ajustar playback rate en ExoPlayer", e)
        }
    }

    private fun calculateLoudnessGain(oldAnalysis: AudioAnalysis?, newAnalysis: AudioAnalysis?): Float {
        val oldLoudness = oldAnalysis?.loudnessLufs ?: -14.0f
        val newLoudness = newAnalysis?.loudnessLufs ?: -14.0f
        val gainDb = oldLoudness - newLoudness
        val gainLinear = 10f.pow(gainDb / 20f)
        return gainLinear.coerceIn(0.7f, 1.3f)
    }

    private fun parseKeyToNumeric(key: String): Int {
        val keyMap = mapOf(
            "C" to 0, "B#" to 0, "C#" to 1, "Db" to 1, "D" to 2, "D#" to 3, "Eb" to 3,
            "E" to 4, "Fb" to 4, "F" to 5, "E#" to 5, "F#" to 6, "Gb" to 6, "G" to 7,
            "G#" to 8, "Ab" to 8, "A" to 9, "A#" to 10, "Bb" to 10, "B" to 11, "Cb" to 11
        )
        val isMinor = key.endsWith("m")
        val root = if (isMinor) key.dropLast(1) else key
        val numericKey = keyMap[root] ?: return -1
        return if (isMinor) (numericKey + 3) % 12 else numericKey
    }

    fun predictIntelligentMixDuration(currentSong: Song, nextSong: Song): Long {
        // Reutiliza la misma l√≥gica que el motor de mezcla para ser consistente.
        val strategy = calculateAutomixStrategy(currentSong, nextSong)
        return calculateFullyIntelligentDuration(currentSong, nextSong, strategy)
    }

}